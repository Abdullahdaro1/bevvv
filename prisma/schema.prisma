// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role    @default(VOLUNTEER) // Can be either "volunteer" or "organization"
  accounts      Account[]
  sessions      Session[]
  volunteer     Volunteer?
}

enum Role {
  VOLUNTEER
  ORGANIZATION
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Volunteer {
  volunteer_id           String   @id @default(uuid())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String   @unique
  first_name             String
  second_name            String
  phone_number           String
  date_of_birth          DateTime
  gender                 String
  country                String
  city                   String
  volunteering_status    Boolean  // true = Available, false = Non
  job_type_id            String   // UUID, you can relate to a JobType table if you have one
  employment_status      Boolean  // true = employed, false = not
  skills                 String
  schedule_of_volunteering_work String
  time_of_volunteer      Int      // full years
  languages              String
  created_at             DateTime @default(now())
  interests              String
  education              Education[]
  work_experience        WorkExperience[]
}

model Education {
  id            String   @id @default(uuid())
  volunteer     Volunteer @relation(fields: [volunteer_id], references: [volunteer_id], onDelete: Cascade)
  volunteer_id  String
  level         String   // High School, Bachelor, Master, PhD
  department    String
  university    String
  country       String
  start_date    DateTime
  end_date      DateTime?
  is_present    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model WorkExperience {
  id            String   @id @default(uuid())
  volunteer     Volunteer @relation(fields: [volunteer_id], references: [volunteer_id], onDelete: Cascade)
  volunteer_id  String
  company_name  String
  position      String
  start_date    DateTime
  end_date      DateTime?
  is_present    Boolean  @default(false)
  description   String
  country       String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}